name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Ensure the token can publish to GitHub Packages (NuGet) and allow cache saves.
permissions:
  contents: read
  packages: write
  actions: write

jobs:
  build:
    name: ${{ matrix.name }} (${{ matrix.build_config }}) â€¢ Qt ${{ matrix.qt-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: ubuntu-latest
            os: ubuntu-latest
            qt-version: "6.6.3"
            arch: x64
            build_config: Release
          - name: windows-latest
            os: windows-latest
            qt-version: "6.6.3"
            arch: x64
            build_config: Release
          - name: windows-latest
            os: windows-latest
            qt-version: "6.6.3"
            arch: x64
            build_config: Debug
          - name: macos-latest (arm64)
            os: macos-latest
            qt-version: "6.6.3"
            arch: arm64
            build_config: Release
          - name: macos-latest (x86_64)
            os: macos-latest
            qt-version: "6.6.3"
            arch: x86_64
            build_config: Release

    runs-on: ${{ matrix.os }}

    # Cross-OS environment for vcpkg binary caching via GitHub Packages (NuGet)
    env:
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VCPKG_FEATURE_FLAGS: binarycaching
      VCPKG_BINARY_SOURCES: >-
        clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite
      NUGET_CREDENTIALPROVIDERS_PATH: ''
      NUGET_PLUGIN_PATHS: ''
      VCPKG_NUGET_EXTRA_ARGS: "-NonInteractive -ForceEnglishOutput -Verbosity detailed -Timeout 600"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt ${{ matrix.qt-version }}
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt-version }}
          arch: ${{ runner.os == 'macOS' && matrix.arch || '' }}

      - name: Install Python via Homebrew (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            # Install Rosetta Homebrew if not present & then python
            if ! [ -x /usr/local/bin/brew ]; then
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            fi
            arch -x86_64 /usr/local/bin/brew install python
          else
            # Install native arm64 python
            brew install python
          fi

      - name: Setup vcpkg environment
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: a2efad2ec955878d30db81d730490e931b84850f
          runVcpkgInstall: false

      # -----------------------------------------------------------------
      # ---           Configure NuGet (Binary Cache)                ---
      # -----------------------------------------------------------------
      - name: Configure NuGet (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $env:VCPKG_PATH = $env:VCPKG_ROOT
          $VCPKG_EXE = "$env:VCPKG_PATH/vcpkg.exe"
          & $VCPKG_EXE nuget add-source -name "github" -source "$env:FEED_URL" -username "$env:GITHUB_REPOSITORY_OWNER" -password "$env:NUGET_AUTH_TOKEN"
          & $VCPKG_EXE help

      - name: Configure NuGet (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export VCPKG_PATH="$VCPKG_ROOT"
          VCPKG_EXE="$VCPKG_PATH/vcpkg"
          "$VCPKG_EXE" nuget add-source -name "github" -source "$FEED_URL" -username "$GITHUB_REPOSITORY_OWNER" -password "$NUGET_AUTH_TOKEN"
          "$VCPKG_EXE" help

      # -----------------------------------------------------------------
      # ---           Install Dependencies                          ---
      # -----------------------------------------------------------------
      - name: Run vcpkg install (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          "${VCPKG_ROOT}/vcpkg" install --triplet=x64-windows

      - name: Run vcpkg install (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          "${VCPKG_ROOT}/vcpkg" install --triplet=x64-linux

      - name: Run vcpkg install (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 "${VCPKG_ROOT}/vcpkg" install --triplet=x64-osx
          else
            "${VCPKG_ROOT}/vcpkg" install --triplet=arm64-osx
          fi

      # -----------------------------------------------------------------
      # ---           Configure & Build Project                     ---
      # -----------------------------------------------------------------
      - name: Configure CMake
        shell: bash
        run: |
          VCPKG_TOOLCHAIN_FILE="${VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
          
          if [ "$RUNNER_OS" == "macOS" ]; then
            if [ "${{ matrix.arch }}" == "x86_64" ]; then
              # Rosetta x86_64 build
              arch -x86_64 cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} \
                -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
                -DVCPKG_TARGET_TRIPLET=x64-osx \
                -DCMAKE_OSX_ARCHITECTURES="x86_64" \
                -DENABLE_TESTING=ON
            else
              # Native arm64 build
              cmake -B build -S . \
                -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} \
                -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
                -DVCPKG_TARGET_TRIPLET=arm64-osx \
                -DCMAKE_OSX_ARCHITECTURES="arm64" \
                -DENABLE_TESTING=ON
            fi
          else
            # Windows/Linux
            cmake -B build -S . \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_config }} \
              -DCMAKE_TOOLCHAIN_FILE="$VCPKG_TOOLCHAIN_FILE" \
              -DENABLE_TESTING=ON
          fi

      - name: Build project
        shell: bash
        run: |
          if [ "$RUNNER_OS" == "macOS" ] && [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 cmake --build build --config ${{ matrix.build_config }}
          else
            cmake --build build --config ${{ matrix.build_config }}
          fi

      # -----------------------------------------------------------------
      # ---           Run Tests                                     ---
      # -----------------------------------------------------------------
      - name: Run Unit Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: .\\build\\bin\\${{ matrix.build_config }}\\unit_tests.exe

      - name: Run Unit Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 ./build/bin/unit_tests -platform offscreen
          else
            ./build/bin/unit_tests -platform offscreen
          fi

      - name: Run Unit Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/unit_tests

      - name: Run Integration Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: .\\build\\bin\\${{ matrix.build_config }}\\integration_tests.exe -platform offscreen

      - name: Run Integration Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            arch -x86_64 ./build/bin/integration_tests -platform offscreen
          else
            ./build/bin/integration_tests -platform offscreen
          fi

      - name: Run Integration Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/integration_tests

      # -----------------------------------------------------------------
      # ---           Archive Build Artifacts                         ---
      # -----------------------------------------------------------------
      - name: Archive build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-windows-${{ matrix.build_config }}
          path: ${{ github.workspace }}/build/bin/${{ matrix.build_config }}/
          retention-days: 7

      - name: Archive build artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-ubuntu
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7

      - name: Archive build artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-macos-${{ matrix.arch }}
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7

  package-macos:
    name: Package macOS Universal Binary
    needs: build
    # This job will only run if all jobs in the 'build' matrix succeed
    runs-on: macos-latest

    steps:
      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: cognitive-pipelines-macos-arm64
          path: arm64

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: cognitive-pipelines-macos-x86_64
          path: x86_64

      - name: Create Universal Binaries
        run: |
          mkdir -p universal
          
          echo "Creating Universal executable for CognitivePipelines..."
          lipo -create -output universal/CognitivePipelines arm64/CognitivePipelines x86_64/CognitivePipelines
          
          echo "Creating Universal executable for unit_tests..."
          lipo -create -output universal/unit_tests arm64/unit_tests x86_64/unit_tests
          
          echo "Creating Universal executable for integration_tests..."
          lipo -create -output universal/integration_tests arm64/integration_tests x86_64/integration_tests
          
          echo "Verifying binaries..."
          lipo -info universal/*

      - name: Upload Universal Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-macos-universal
          path: universal/
          retention-days: 7