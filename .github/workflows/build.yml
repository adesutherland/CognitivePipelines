name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Ensure the token can publish to GitHub Packages (NuGet) and allow cache saves.
permissions:
  contents: read
  packages: write
  actions: write

jobs:
  build:
    name: ${{ matrix.os }} â€¢ Qt ${{ matrix.qt-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        qt-version: [ "6.6.3" ]
    runs-on: ${{ matrix.os }}

    # Cross-OS environment for vcpkg binary caching via GitHub Packages (NuGet)
    env:
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VCPKG_FEATURE_FLAGS: binarycaching
      VCPKG_BINARY_SOURCES: >-
        clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite
      NUGET_CREDENTIALPROVIDERS_PATH: ''
      NUGET_PLUGIN_PATHS: ''
      VCPKG_NUGET_EXTRA_ARGS: "-NonInteractive -ForceEnglishOutput -Verbosity detailed -Timeout 600"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt ${{ matrix.qt-version }}
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt-version }}
          cache: true

      - name: Add Qt bin to PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "${{ env.QT_ROOT_DIR }}\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update          
          sudo apt-get install -y \
            autoconf automake libtool pkg-config autoconf-archive ninja-build mono-complete \
            xvfb libxcb-cursor0 libxcb-cursor-dev '^libxcb.*-dev' libx11-xcb-dev \
            libfontconfig1-dev libfreetype6-dev libegl1-mesa-dev libgbm-dev \
            libgl1-mesa-dev libgles2-mesa-dev libxi-dev libdbus-1-dev

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config gettext autoconf-archive ninja mono
          echo "$(brew --prefix)/opt/gettext/bin" >> $GITHUB_PATH
          echo "ACLOCAL_PATH=$(brew --prefix)/share/aclocal:$(brew --prefix gettext)/share/aclocal" >> $GITHUB_ENV
          echo "$(brew --prefix)/bin" >> $GITHUB_PATH

      - name: Install dependencies via vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: a2efad2ec955878d30db81d730490e931b84850f

      - name: Allow vcpkg to download helper tools (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "VCPKG_FORCE_SYSTEM_BINARIES=" >> "$GITHUB_ENV"

      - name: Show suggested vcpkg baseline (to update vcpkg.json)
        shell: bash
        run: |
          "${VCPKG_ROOT}/vcpkg" x-update-baseline || true

      - name: Configure NuGet (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          USERNAME: ${{ github.repository_owner }}
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: |
          $nuget = & "${Env:VCPKG_ROOT}\vcpkg.exe" fetch nuget
          & $nuget sources remove -Name GitHubPackages -NonInteractive 2>$null | Out-Null
          & $nuget sources add `
            -Source "$Env:FEED_URL" `
            -Name GitHubPackages `
            -UserName "${Env:GITHUB_REPOSITORY_OWNER}" `
            -Password "${Env:NUGET_AUTH_TOKEN}" `
            -StorePasswordInClearText `
            -NonInteractive
          & $nuget setapikey "${Env:NUGET_AUTH_TOKEN}" -Source "$Env:FEED_URL" -NonInteractive

      - name: Configure NuGet (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        env:
          USERNAME: ${{ github.repository_owner }}
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: |      
          # Let vcpkg download helper tools (needed on macOS runners)
          unset VCPKG_FORCE_SYSTEM_BINARIES 
          # Get a clean path to nuget.exe (last line of stdout)
          nuget_exe="$("${VCPKG_ROOT}/vcpkg" fetch nuget 2>/dev/null | tail -n1)"
          # Guardrail: bail with a clear error if we didn't get a file path
          if [ ! -f "$nuget_exe" ]; then
          echo "::error::vcpkg fetch nuget did not return a usable path. Got: '$nuget_exe'"
          "${VCPKG_ROOT}/vcpkg" fetch nuget || true
          exit 1
          fi
          # Preconfigure the GitHub Packages source using the CI token (non-interactive)
          mono "$nuget_exe" sources remove -Name GitHubPackages -NonInteractive >/dev/null 2>&1 || true
          mono "$nuget_exe" sources add \
            -Source "${FEED_URL}" \
            -Name GitHubPackages \
            -UserName "${GITHUB_REPOSITORY_OWNER}" \
            -Password "${NUGET_AUTH_TOKEN}" \
            -StorePasswordInClearText \
            -NonInteractive
          mono "$nuget_exe" setapikey "${NUGET_AUTH_TOKEN}" -Source "${FEED_URL}" -NonInteractive

      - name: Configure (CMake)
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows configuration (unchanged)
            cmake -S . -B "${{ github.workspace }}/build" `
              -G "Visual Studio 17 2022" -A x64 `
              -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" `
              -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" `
              -DENABLE_TESTING=ON
          else
            # Common flags for Linux/macOS
            CMAKE_FLAGS="-S . -B ${{ github.workspace }}/build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
              -DENABLE_TESTING=ON"
    
            # Add macOS-specific flags to build a Universal (arm64 + x86_64) binary
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_ARCHITECTURES=\"arm64;x86_64\""
            fi
          
            # Unset vcpkg flag
            if [[ "${{ runner.os }}" != "Windows" ]]; then
              unset VCPKG_FORCE_SYSTEM_BINARIES
            fi
            
            # Run cmake with all flags
            cmake $CMAKE_FLAGS
          fi  

      - name: Build (Release)
        run: cmake --build ${{ github.workspace }}/build --config Release --target CognitivePipelines unit_tests integration_tests -j 2

      - name: Run Unit Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: .\\build\\bin\\Release\\unit_tests.exe

      - name: Run Unit Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: ./build/bin/unit_tests -platform offscreen

      - name: Run Unit Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/unit_tests

      - name: Run Integration Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: .\\build\\bin\Release\\integration_tests.exe

      - name: Run Integration Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: ./build/bin/integration_tests -platform offscreen

      - name: Run Integration Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/integration_tests

      # -----------------------------------------------------------------
      # ---           Archive Build Artifacts                         ---
      # -----------------------------------------------------------------

      - name: Archive build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-windows
          path: ${{ github.workspace }}/build/bin/Release/
          retention-days: 7 # Optional: keeps artifacts for 7 days

      - name: Archive build artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-ubuntu
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7

      - name: Archive build artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-macos-universal
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7
