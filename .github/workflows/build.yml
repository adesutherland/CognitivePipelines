name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Ensure the token can publish to GitHub Packages (NuGet) and allow cache saves.
permissions:
  contents: read
  packages: write
  actions: write

jobs:
  build:
    name: ${{ matrix.os }} â€¢ Qt ${{ matrix.qt-version }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        qt-version: [ "6.6.3" ]
    runs-on: ${{ matrix.os }}

    # Cross-OS environment for vcpkg binary caching via GitHub Packages (NuGet)
    env:
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VCPKG_FEATURE_FLAGS: binarycaching
      VCPKG_BINARY_SOURCES: >-
        clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt ${{ matrix.qt-version }}
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt-version }}
          cache: true

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf automake libtool pkg-config autoconf-archive

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config gettext autoconf-archive ninja
          echo "$(brew --prefix)/opt/gettext/bin" >> $GITHUB_PATH
          echo "ACLOCAL_PATH=$(brew --prefix)/share/aclocal:$(brew --prefix gettext)/share/aclocal" >> $GITHUB_ENV

      - name: Install dependencies via vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: a2efad2ec955878d30db81d730490e931b84850f

      - name: Configure (CMake)
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake -S . -B "${{ github.workspace }}/build" \
              -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
              -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
          else
            cmake -S . -B "${{ github.workspace }}/build" \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
              -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}"
          fi

      - name: Build (Release)
        run: cmake --build ${{ github.workspace }}/build --config Release --target CognitivePipelines -j 2
