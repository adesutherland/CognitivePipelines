name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Ensure the token can publish to GitHub Packages (NuGet) and allow cache saves.
permissions:
  contents: read
  packages: write
  actions: write

jobs:
  build:
    name: ${{ matrix.name }} â€¢ Qt ${{ matrix.qt-version }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: ubuntu-latest
            qt-version: "6.6.3"
          - os: windows-latest
            name: windows-latest
            qt-version: "6.6.3"
          - os: macos-latest
            name: macos-latest (arm64)
            qt-version: "6.6.3"
            arch: arm64
          - os: macos-latest
            name: macos-latest (x86_64)
            qt-version: "6.6.3"
            arch: x86_64

    runs-on: ${{ matrix.os }}

    # Cross-OS environment for vcpkg binary caching via GitHub Packages (NuGet)
    env:
      FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      VCPKG_FEATURE_FLAGS: binarycaching
      VCPKG_BINARY_SOURCES: >-
        clear;nuget,https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json,readwrite
      NUGET_CREDENTIALPROVIDERS_PATH: ''
      NUGET_PLUGIN_PATHS: ''
      VCPKG_NUGET_EXTRA_ARGS: "-NonInteractive -ForceEnglishOutput -Verbosity detailed -Timeout 600"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Qt ${{ matrix.qt-version }}
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ matrix.qt-version }}
          cache: true
          arch: ${{ runner.os == 'macOS' && matrix.arch || '' }}

      # --- ADDED: This new step sets env vars for all subsequent macOS steps ---
      - name: Set macOS architecture variables
        if: runner.os == 'macOS'
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            echo "RUN_ARCH=arch -x86_64" >> $GITHUB_ENV
            echo "BREW_HOME=/usr/local" >> $GITHUB_ENV
          else
            echo "RUN_ARCH=" >> $GITHUB_ENV
            echo "BREW_HOME=$(brew --prefix)" >> $GITHUB_ENV
          fi

      - name: Add Qt bin to PATH (Windows)
        if: runner.os == 'Windows'
        run: echo "${{ env.QT_ROOT_DIR }}\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install build dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake libtool pkg-config autoconf-archive ninja-build mono-complete \
            xvfb libxcb-cursor0 libxcb-cursor-dev '^libxcb.*-dev' libx11-xcb-dev \
            libfontconfig1-dev libfreetype6-dev libegl1-mesa-dev libgbm-dev \
            libgl1-mesa-dev libgles2-mesa-dev libxi-dev libdbus-1-dev

      - name: Install build dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            # Install Rosetta Homebrew (if not present) & then deps
            if ! [ -x /usr/local/bin/brew ]; then
              arch -x86_64 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            fi
            /usr/local/bin/brew install autoconf automake libtool pkg-config gettext autoconf-archive ninja mono python
          else
            # Install native arm64 deps
            brew update
            brew install autoconf automake libtool pkg-config gettext autoconf-archive ninja mono python
          fi
          
          # Use the BREW_HOME var set in the previous step
          echo "${{ env.BREW_HOME }}/opt/gettext/bin" >> $GITHUB_PATH
          echo "ACLOCAL_PATH=${{ env.BREW_HOME }}/share/aclocal:${{ env.BREW_HOME }}/opt/gettext/share/aclocal" >> $GITHUB_ENV
          echo "${{ env.BREW_HOME }}/bin" >> $GITHUB_PATH

      - name: Bootstrap vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: a2efad2ec955878d30db81d730490e931b84850f
          runVcpkgInstall: false

      - name: Allow vcpkg to download helper tools (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          echo "VCPKG_FORCE_SYSTEM_BINARIES=" >> "$GITHUB_ENV"

      - name: Show suggested vcpkg baseline (to update vcpkg.json)
        shell: bash
        # --- CHANGED: Added arch prefix ---
        run: |
          ${{ env.RUN_ARCH }} "${VCPKG_ROOT}/vcpkg" x-update-baseline || true

      - name: Configure NuGet (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          USERNAME: ${{ github.repository_owner }}
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: |
          $nuget = & "${Env:VCPKG_ROOT}\vcpkg.exe" fetch nuget
          & $nuget sources remove -Name GitHubPackages -NonInteractive 2>$null | Out-Null
          & $nuget sources add `
            -Source "$Env:FEED_URL" `
            -Name GitHubPackages `
            -UserName "${Env:GITHUB_REPOSITORY_OWNER}" `
            -Password "${Env:NUGET_AUTH_TOKEN}" `
            -StorePasswordInClearText `
            -NonInteractive
          & $nuget setapikey "${Env:NUGET_AUTH_TOKEN}" -Source "$Env:FEED_URL" -NonInteractive

      - name: Configure NuGet (Linux / macOS)
        if: runner.os != 'Windows'
        shell: bash
        env:
          USERNAME: ${{ github.repository_owner }}
          FEED_URL: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        run: |
          # Let vcpkg download helper tools (needed on macOS runners)
          unset VCPKG_FORCE_SYSTEM_BINARIES
          nuget_exe="$(${{ env.RUN_ARCH }} "${VCPKG_ROOT}/vcpkg" fetch nuget 2>/dev/null | tail -n1)"
          # Guardrail: bail with a clear error if we didn't get a file path
          if [ ! -f "$nuget_exe" ]; then
          echo "::error::vcpkg fetch nuget did not return a usable path. Got: '$nuget_exe'"
          ${{ env.RUN_ARCH }} "${VCPKG_ROOT}/vcpkg" fetch nuget || true
          exit 1
          fi
          # Preconfigure the GitHub Packages source using the CI token (non-interactive)
          ${{ env.RUN_ARCH }} mono "$nuget_exe" sources remove -Name GitHubPackages -NonInteractive >/dev/null 2>&1 || true
          ${{ env.RUN_ARCH }} mono "$nuget_exe" sources add \
            -Source "${FEED_URL}" \
            -Name GitHubPackages \
            -UserName "${GITHUB_REPOSITORY_OWNER}" \
            -Password "${NUGET_AUTH_TOKEN}" \
            -StorePasswordInClearText \
            -NonInteractive
          ${{ env.RUN_ARCH }} mono "$nuget_exe" setapikey "${NUGET_AUTH_TOKEN}" -Source "${FEED_URL}" -NonInteractive

      - name: Run vcpkg install (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          "${VCPKG_ROOT}/vcpkg" install --triplet=x64-windows

      - name: Run vcpkg install (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          "${VCPKG_ROOT}/vcpkg" install --triplet=x64-linux

      - name: Run vcpkg install (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          unset VCPKG_FORCE_SYSTEM_BINARIES
          if [ "${{ matrix.arch }}" == "x86_64" ]; then
            ${{ env.RUN_ARCH }} "${VCPKG_ROOT}/vcpkg" install --triplet=x64-osx
          else
            ${{ env.RUN_ARCH }} "${VCPKG_ROOT}/vcpkg" install --triplet=arm64-osx
          fi

      - name: Configure CMake
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Windows configuration
            cmake -S . -B "${{ github.workspace }}/build" \
              -G "Visual Studio 17 2022" -A x64 \
              -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
              -DCMAKE_PREFIX_PATH="${{ env.Qt6_DIR }}" \
              -DENABLE_TESTING=ON
          else
            # Common flags for Linux/macOS
            CMAKE_FLAGS="-S . -B ${{ github.workspace }}/build \
              -G Ninja \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_TOOLCHAIN_FILE=${{ env.VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake \
              -DCMAKE_PREFIX_PATH=${{ env.Qt6_DIR }} \
              -DENABLE_TESTING=ON"
          
            # --- CHANGED: This block now selects the *single* arch, not universal ---
            if [[ "${{ runner.os }}" == "macOS" ]]; then
              if [ "${{ matrix.arch }}" == "x86_64" ]; then
                CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_ARCHITECTURES='x86_64' -DVCPKG_TARGET_TRIPLET=x64-osx"
              else
                CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_ARCHITECTURES='arm64' -DVCPKG_TARGET_TRIPLET=arm64-osx"
              fi
            else
              # Linux flags
              CMAKE_FLAGS="$CMAKE_FLAGS -DVCPKG_TARGET_TRIPLET=x64-linux"
            fi
          
            # Unset vcpkg flag
            if [[ "${{ runner.os }}" != "Windows" ]]; then
              unset VCPKG_FORCE_SYSTEM_BINARIES
            fi
          
            # Run cmake with all flags
            ${{ env.RUN_ARCH }} cmake $CMAKE_FLAGS
          fi

      - name: Build (Release)
        shell: bash
        run: ${{ env.RUN_ARCH }} cmake --build ${{ github.workspace }}/build --config Release --target CognitivePipelines unit_tests integration_tests -j 2

      - name: Run Unit Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: .\\build\\bin\\Release\\unit_tests.exe

      - name: Run Unit Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: ${{ env.RUN_ARCH }} ./build/bin/unit_tests -platform offscreen

      - name: Run Unit Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/unit_tests

      - name: Run Integration Tests (Windows)
        if: runner.os == 'Windows'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        shell: bash
        run: |
          set -o pipefail
          .\\build\\bin\\Release\\integration_tests.exe 2>&1 | tee integration_test_log.txt

      - name: Run Integration Tests (macOS)
        if: runner.os == 'macOS'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: ${{ env.RUN_ARCH }} ./build/bin/integration_tests -platform offscreen

      - name: Run Integration Tests (Linux)
        if: runner.os == 'Linux'
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: xvfb-run ./build/bin/integration_tests

      # -----------------------------------------------------------------
      # ---           Archive Build Artifacts                         ---
      # -----------------------------------------------------------------

      - name: Archive build artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-windows
          path: ${{ github.workspace }}/build/bin/Release/
          retention-days: 7

      - name: Archive build artifacts (Linux)
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-ubuntu
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7

      - name: Archive build artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-macos-${{ matrix.arch }}
          path: ${{ github.workspace }}/build/bin/
          retention-days: 7

  # --- ADDED: New job to package the final macOS universal binary ---
  package-macos:
    name: Package macOS Universal Binary
    needs: build
    runs-on: macos-latest

    steps:
      - name: Download arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: cognitive-pipelines-macos-arm64
          path: arm64

      - name: Download x86_64 artifact
        uses: actions/download-artifact@v4
        with:
          name: cognitive-pipelines-macos-x86_64
          path: x86_64

      - name: Create Universal Binaries
        run: |
          mkdir -p universal
          
          echo "Creating Universal executable for CognitivePipelines..."
          lipo -create -output universal/CognitivePipelines arm64/CognitivePipelines x86_64/CognitivePipelines
          
          echo "Creating Universal executable for unit_tests..."
          lipo -create -output universal/unit_tests arm64/unit_tests x86_64/unit_tests
          
          echo "Creating Universal executable for integration_tests..."
          lipo -create -output universal/integration_tests arm64/integration_tests x86_64/integration_tests
          
          echo "Verifying binaries..."
          lipo -info universal/*

      - name: Upload Universal Artifact
        uses: actions/upload-artifact@v4
        with:
          name: cognitive-pipelines-macos-universal
          path: universal/
          retention-days: 7